<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yoxious&#39;s blog</title>
  <icon>https://yushen7.github.io/icon.png</icon>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://yushen7.github.io/"/>
  <updated>2020-08-07T09:09:07.476Z</updated>
  <id>https://yushen7.github.io/</id>
  
  <author>
    <name>yoxious</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS中的this</title>
    <link href="https://yushen7.github.io/2020/06/29/about-this/"/>
    <id>https://yushen7.github.io/2020/06/29/about-this/</id>
    <published>2020-06-29T00:53:25.000Z</published>
    <updated>2020-08-07T09:09:07.476Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;看了冴羽的文章&lt;a href=&quot;https://github.com/mqyqingfeng/Blog/issues/7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“JavaScript深入之从ECMAScript规范解读this”&lt;/a&gt;，决定读一读&lt;code&gt;this&lt;/code&gt;的规范定义，梳理一下this。&lt;/p&gt;
&lt;h1 id=&quot;this存在的场景&quot;&gt;&lt;a href=&quot;#this存在的场景&quot; class=&quot;headerlink&quot; title=&quot;this存在的场景&quot;&gt;&lt;/a&gt;this存在的场景&lt;/h1&gt;&lt;p&gt;&lt;code&gt;this&lt;/code&gt;存在的场景肯定是&lt;strong&gt;函数执行&lt;/strong&gt;的时候，那么有以下几种调用函数的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接调用：&lt;code&gt;foo()&lt;/code&gt;，&lt;code&gt;foo&lt;/code&gt;中&lt;code&gt;this&lt;/code&gt;的值将会是&lt;code&gt;window&lt;/code&gt;或&lt;code&gt;undeifined&lt;/code&gt;，取决于是否是严格模式。&lt;/li&gt;
&lt;li&gt;作为对象的方法调用：&lt;code&gt;obj.foo()&lt;/code&gt;，&lt;code&gt;this&lt;/code&gt;的值将是&lt;code&gt;obj&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;作为&lt;code&gt;new&lt;/code&gt;操作符的一部分调用：&lt;code&gt;new foo()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;apply&lt;/code&gt;、&lt;code&gt;call&lt;/code&gt;、&lt;code&gt;bind&lt;/code&gt;调用：&lt;code&gt;this&lt;/code&gt;的值将被绑定为指定值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然而，有特殊情况的存在：&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://yushen7.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="https://yushen7.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>认识new操作符</title>
    <link href="https://yushen7.github.io/2020/05/15/about-new-operator/"/>
    <id>https://yushen7.github.io/2020/05/15/about-new-operator/</id>
    <published>2020-05-15T17:33:11.000Z</published>
    <updated>2020-08-07T09:09:07.476Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;看了&lt;a href=&quot;https://github.com/mqyqingfeng/Blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;冴羽的Javscript博客&lt;/a&gt;，同样模拟一下&lt;code&gt;new&lt;/code&gt;的功能实现&lt;/p&gt;
&lt;h1 id=&quot;对于new操作符的认识&quot;&gt;&lt;a href=&quot;#对于new操作符的认识&quot; class=&quot;headerlink&quot; title=&quot;对于new操作符的认识&quot;&gt;&lt;/a&gt;对于new操作符的认识&lt;/h1&gt;&lt;p&gt;首先，是使用&lt;code&gt;new&lt;/code&gt;的两种方式：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person &lt;span class=&quot;comment&quot;&gt;// person1.name === undefined &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;Siro&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// person2.name === &#39;Siro&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其次，简单看一下&lt;code&gt;new&lt;/code&gt;的大致流程：&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://yushen7.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="https://yushen7.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的对象</title>
    <link href="https://yushen7.github.io/2020/05/15/operate-object/"/>
    <id>https://yushen7.github.io/2020/05/15/operate-object/</id>
    <published>2020-05-15T13:27:17.000Z</published>
    <updated>2020-08-07T09:09:07.476Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;此文为关于JS中对象的笔记。&lt;/p&gt;
&lt;p&gt;ECMA-26对于对象的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In ECMAScript, the state and methods are carried by objects, while&lt;br&gt;structure, behaviour, and state are all inherited.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;高程（中文版）：“无序属性的集合，其属性可以包含基本值、对象或者函数。”&lt;/p&gt;
&lt;p&gt;简而言之，在Ecmascript中：&lt;strong&gt;对象是键值对（key-value）的集合&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;对象属性的特性-attribute&quot;&gt;&lt;a href=&quot;#对象属性的特性-attribute&quot; class=&quot;headerlink&quot; title=&quot;对象属性的特性(attribute)&quot;&gt;&lt;/a&gt;对象属性的特性(attribute)&lt;/h1&gt;&lt;p&gt;对象的属性有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据属性。&lt;/li&gt;
&lt;li&gt;访问器属性。通过getter和setter取值和赋值。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://yushen7.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="https://yushen7.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>meta标签中的viewport</title>
    <link href="https://yushen7.github.io/2020/05/14/about-meta-viewport/"/>
    <id>https://yushen7.github.io/2020/05/14/about-meta-viewport/</id>
    <published>2020-05-14T01:33:11.000Z</published>
    <updated>2020-08-07T09:09:07.472Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;很久很久以前，在适配移动端的时候，第一次听到viewport这个概念。&lt;/p&gt;
&lt;p&gt;只知道一股脑儿复制：&lt;/p&gt;
&lt;blockquote&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, width=device-width, user-scalable=no, maximum-scale=1.0&quot;&gt;
&lt;/blockquote&gt;
&lt;p&gt;当时不知道是什么意思，查了几篇文章后未果。&lt;/p&gt;
&lt;p&gt;近期好好读了远古时期介绍viewport的博客，准备对这个概念做一个梳理。&lt;/p&gt;
&lt;p&gt;博客文章地址：&lt;a href=&quot;https://quirksmode.org/mobile/viewports.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A tale of two viewports — 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没有找出关于&lt;code&gt;viewport&lt;/code&gt;的标准定义，以下内容是结合了该博客viewport概念系列的一家之见。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://yushen7.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="https://yushen7.github.io/tags/HTML/"/>
    
      <category term="FE" scheme="https://yushen7.github.io/tags/FE/"/>
    
      <category term="viewport" scheme="https://yushen7.github.io/tags/viewport/"/>
    
  </entry>
  
  <entry>
    <title>CSS中的line-height</title>
    <link href="https://yushen7.github.io/2020/05/11/about_line-height/"/>
    <id>https://yushen7.github.io/2020/05/11/about_line-height/</id>
    <published>2020-05-11T01:38:34.000Z</published>
    <updated>2020-08-07T09:09:07.476Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;补一补CSS基础，从line-height开始。&lt;/p&gt;
&lt;h1 id=&quot;line-height到底指什么&quot;&gt;&lt;a href=&quot;#line-height到底指什么&quot; class=&quot;headerlink&quot; title=&quot;line-height到底指什么&quot;&gt;&lt;/a&gt;line-height到底指什么&lt;/h1&gt;&lt;p&gt;line-height可以粗略认为是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由行内级元素组成内容的块状元素的最小的高度。&lt;/li&gt;
&lt;li&gt;行内元素（non-replaced inline elements）中用来计算line-box的高度的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;line-box根据定义是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The rectangular area that contains the boxes that form a line is called a line box.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;包含着组成一行的框（boxes）的矩形区域。&lt;/p&gt;
&lt;p&gt;而这些框（boxes）则是行内级（inline-level elements）元素产生的，所以可以看成这个line-box里包含了许多的行内级元素，行内级元素即display属性为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;inline&lt;/li&gt;
&lt;li&gt;inline-block&lt;/li&gt;
&lt;li&gt;inline-table&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;的元素。&lt;/p&gt;
&lt;p&gt;需要详细说明，挖个坑。&lt;/p&gt;
&lt;h1 id=&quot;line-height的值&quot;&gt;&lt;a href=&quot;#line-height的值&quot; class=&quot;headerlink&quot; title=&quot;line-height的值&quot;&gt;&lt;/a&gt;line-height的值&lt;/h1&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://yushen7.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="FE" scheme="https://yushen7.github.io/tags/FE/"/>
    
      <category term="CSS" scheme="https://yushen7.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS中的类型转换</title>
    <link href="https://yushen7.github.io/2020/04/30/type-casting/"/>
    <id>https://yushen7.github.io/2020/04/30/type-casting/</id>
    <published>2020-04-30T16:27:17.000Z</published>
    <updated>2020-06-30T16:27:17.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;简单总结一下JS中的部分显/隐式强制类型转换。&lt;/p&gt;
&lt;h1 id=&quot;1、类型&quot;&gt;&lt;a href=&quot;#1、类型&quot; class=&quot;headerlink&quot; title=&quot;1、类型&quot;&gt;&lt;/a&gt;1、类型&lt;/h1&gt;&lt;p&gt;JS中6种基本类型：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Undefined, Null, Boolean, Number, Symbol, or String&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以及对象：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;member of the type Object&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Boolean的真假值&quot;&gt;&lt;a href=&quot;#Boolean的真假值&quot; class=&quot;headerlink&quot; title=&quot;Boolean的真假值&quot;&gt;&lt;/a&gt;Boolean的真假值&lt;/h2&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://yushen7.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="https://yushen7.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="https://yushen7.github.io/2020/04/18/promise/"/>
    <id>https://yushen7.github.io/2020/04/18/promise/</id>
    <published>2020-04-18T17:21:20.000Z</published>
    <updated>2020-05-14T16:00:31.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;这里是一个笨蛋学习实现Promise的记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;为什么使用Promise？&quot;&gt;&lt;a href=&quot;#为什么使用Promise？&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://yushen7.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="https://yushen7.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>原型与原型链</title>
    <link href="https://yushen7.github.io/2020/04/18/prototype/"/>
    <id>https://yushen7.github.io/2020/04/18/prototype/</id>
    <published>2020-04-18T17:21:20.000Z</published>
    <updated>2020-05-14T16:00:31.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文是阅读你不知道的JS（上）-原型部分所做的笔记。&lt;/p&gt;
&lt;h1 id=&quot;原型与原型链&quot;&gt;&lt;a href=&quot;#原型与原型链&quot; class=&quot;headerlink&quot; title=&quot;原型与原型链&quot;&gt;&lt;/a&gt;原型与原型链&lt;/h1&gt;&lt;p&gt;ECMA-262对于原型的定义（prototype）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;object that provides shared properties for other objects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;函数都有一个&lt;code&gt;prototype&lt;/code&gt;属性。&lt;/li&gt;
&lt;li&gt;对象&lt;strong&gt;一般&lt;/strong&gt;都有一个&lt;code&gt;[[prototype]]&lt;/code&gt;属性，可以通过&lt;code&gt;[[prototype]]&lt;/code&gt;访问另一个对象，从而把对象和对象串联起来。&lt;/li&gt;
&lt;li&gt;可通过new调用一个函数，使返回对象的&lt;code&gt;[[prototype]]&lt;/code&gt;和此函数的&lt;code&gt;prototype&lt;/code&gt;建立关联。&lt;/li&gt;
&lt;li&gt;访问一个对象的属性/方法时，若未在此对象上找到对应的属性/方法，将会沿着原型链一直往上查找，即通过&lt;code&gt;[[prototype]]&lt;/code&gt;查找，直到查找到对应的属性/方法；反之最后会查找到&lt;code&gt;null&lt;/code&gt;，返回&lt;code&gt;undefined&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://yushen7.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Javascript" scheme="https://yushen7.github.io/tags/Javascript/"/>
    
  </entry>
  
</feed>
